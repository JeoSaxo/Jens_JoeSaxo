de/joesaxo/library/server/info.txt


de.joesaxo.library.server.interfaces.IConnection

	public void establishedConnection(String clientIP);
		called if connection was established
		clientIP: IP and Port of the connected socket


de.joesaxo.library.server.interfaces.IReceiver

	public void IncommingMessage(String clientIP, String message);
		called if a new message was sent to the client
		clientIP: IP and Port of the connected socket
		message: the message that was sent


de.joesaxo.library.server.interfaces.ITimeOut

	public void timedOut(String clientIP, long delay);
		called if last ping wasn't answert in "maxTimeOut" miliseconds (definable in Server and Client. Default value is 500ms)
		clientIP: IP and Port of the connected socket
		delay: delay to the last try of pinging


de.joesaxo.library.server.Client

	public Client(String IP, int port, IReceiver iReceiver);
	public Client(String IP, int port, IReceiver iReceiver, IConnection iConnection);
		IP: ip of the Server
		port: port of the Server
		iReceiver: look on Definition
		iConnection: look on Definition
		
	public boolean start();
		starts the client, if client wasn't started or was stopped / disconnected
		returns true, if starting was succesfull

	public boolean stop();
		stops the client, if client is running / is connected
		returns true, if stopping was succesfull

	public boolean isRunning();
		returns if the client was started and doesn't lost connection / stopped
	
	public void setDisconnectOnTimeOut(boolean disconnectOnTimeOut);
		disconnectOnTimeOut: if true the connetion will be closed if maxTimeOut is reached
	
	public void setTimeOutInterface(ITimeOut iTimeOut);
		sets the ITimeOut interface for the Client
		iTimeOut: look on Definition
		
	
	public void setMaxTimeOut(long maxTimeOut);
		sets the time between the ping-start and a timeout (default value: 500ms)
		maxTimeOut: time in milliseconds (must be lower than delayTime or it will be delayTime / 2)
	
	public void setDelayTime(long delayTime);
		sets the time between two pings (default value: 1000ms)
		delayTime: time in milliseconds (must be higher than maxTimeOut or it will be maxTimeOut * 2)

	public boolean send(String message);
		sends a message to the connected client
		returns true if sending was succesfull

	public String getClientID();
		returns IP and Port of the connected socket for a clear distinction (built with the ip and port)
	

	public boolean isConnected();
		returns if the clients has established a connection and is connected

	@Override // IConnection
	public void establishedConnection(String clientIP);
	
	
de.joesaxo.libraray.server.server.Server
	
	public Server(int port, int maxclients, IReceiver iReceiver)
	public Server(int port, int maxclients, IReceiver iReceiver, IConnection iConnection)
		port: port of the Server
		maxclients: number of clients, that can maximally connect to the Server at the same time
		iReceiver: look on Definition
		iConnection: look on Definition
		
	public boolean start();
		starts the server, if the server wasn't started
		returns true, if starting was succesfull

	public boolean stop();
		stops the server, if server is running
		returns true, if stopping was succesfull
		
	public boolean isRunning();
		returns if the server was started and wasn't stopped
	
	public void setDisconnectOnTimeOut(boolean disconnectOnTimeOut);
		disconnectOnTimeOut: if true the connetion will be closed if maxTimeOut is reached
	
	public void setTimeOutInterface(ITimeOut iTimeOut);
		sets the ITimeOut interface for the Client
		iTimeOut: look on Definition
		
	public void setMaxTimeOut(long maxTimeOut);
		sets the time between the ping-start and a timeout (default value: 500ms)
		maxTimeOut: time in milliseconds (must be lower than delayTime or it will be delayTime / 2)
	
	public void setDelayTime(long delayTime);
		sets the time between two pings (default value: 1000ms)
		delayTime: time in milliseconds (must be higher than maxTimeOut or it will be maxTimeOut * 2)

	public boolean disconnect(String clientid)
		cuts the connection to the client with the string clientip
		returns true if client was connected

	public boolean disconnectAll() {
		cuts the connection to all clients connected to the server

	public boolean isConnected(String clientid)
		returns true if the client with the string clientid is still connected

	public int connectedClients()
		returns the amount of connected clients

	public String getClientIP(int clientidn)
		returns the string clientid of the client with the index clientidn
		clientidn: index of the client (if out of bounds returns null)

	public String[] getClients();
		returns the string clientid of all connected clients as a string array
		
	public boolean SendAll(String message)
		sends a message to all connected clients
		returns true if server is still running / message was sent

	public boolean Send(String clientid, String message) {
		sends a message the connected client with the string clientid
		returns true if server is still running and message was sent succesfully
	}

	@Override // IConnection
	public void establishedConnection(String clientIP);
	
	